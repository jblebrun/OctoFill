# Default register set
:alias px v0
:alias py v1
:alias top v2
:alias left v3
:alias bottom v4
:alias right v5

# Fill register set
:alias fx v0
:alias fy v1

# temp things
:alias tmp vb
:alias inkey vb
:alias dotwidth vc

### 
# Fill launch
# markbound - THe current crosshair mark becomes this boundary for fill
# marknew - The current crosshair mark becomes this boudnary after fill.
# mark - The current crosshair boundary.
# 
# When we fill from a location, say left to right:
:macro fill markbound marknew mark {
  # Don't fill if we are on top of the bound
  if mark != marknew begin
    # Gonna mess up some registers.
    i := data
    save v5

    # Hide the crosshairs because XOR drawing.
    i := dot
    sprite px top 1
    sprite left py 1

    # Setup the new fill boundary 
    markbound := mark
    runfill
    i := data
    load v5
    # Show the crosshairs
    i := dot
    sprite px top 1
    sprite left py 1 
    marknew := mark
  end
}

# BORING move handlers
: moveup
  sprite left py 1
  if py == top begin py := bottom else py -= 1 end
  sprite left py 1
;

: movedown
  sprite left py 1
  if py == bottom begin py := top else py += 1 end
  sprite left py 1
;

: moveleft
  sprite px top 1
  if px == left begin px := right else px -= 1 end
  sprite px top 1
;

: moveright
  sprite px top 1
  if px == right begin px := left else px += 1 end
  sprite px top 1
;

# Messes up:
# v0, v1, vc, i
# Fill in an area of the screen.
: runfill
  # Start from the top left of the current region
  fx := left
  fy := top

# Fill from left to right,
# in Top-to-bottoms stripes
: xloop
  # Calculate the stripewidth. If there's a lot left to fill, it's 8.
  # Otherwise, it is the amount left to fill.
  dotwidth := right
  dotwidth -= fx
  if dotwidth > 8 then dotwidth := 8

  # Get the graphic location corresponding to this vertical stripe.
  i := beforedots 
  i += dotwidth

: yloop
  sprite fx fy 1

  fy += 1
  if fy != bottom then jump yloop

  # We hit the bottom, move over
  fx += dotwidth
  fy := top

  if fx < right then jump xloop
;


: main
  px := 3
  py := 3
  top := 0
  bottom := 32
  left := 0
  right := 64

  # Start the crosshairs
  i := dot
  sprite px top 1
  sprite left py 1

  # Input loop
  loop
    inkey := 5 if inkey key then moveup
    inkey := 8 if inkey key then  movedown
    inkey := 7 if inkey key then moveleft
    inkey := 9 if inkey key then moveright


    inkey := 4 if inkey key begin fill left right px end
    inkey := 6 if inkey key begin fill top bottom py end
    inkey := 0xA if inkey key begin fill right left px end
    inkey := 0xB if inkey key begin fill bottom top py end
  again

# One byte before the dots, so we can just add a width
: beforedots 0xFF
# Various width "dots" for the remainder part of the fill routine.
: dot 0x80 
: dot2 0xC0 
: dot3 0xE0
: dot4 0xF0
: dot5 0xF8
: dot6 0xFC
: dot7 0xFE
: dot8 0xFF
: data
